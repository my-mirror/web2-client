import { useEffect, useState } from "react";
import { useTonConnectUI } from "@tonconnect/ui-react";

import { Button } from "~/shared/ui/button";
import { useAuth } from "~/shared/services/auth";
import { Address } from "@ton/core";

type WelcomeStepProps = {
  nextStep(): void;
};

export const WelcomeStep = ({ nextStep }: WelcomeStepProps) => {
  const [tonConnectUI] = useTonConnectUI();
  const [isLoaded, setLoaded] = useState(false);
  const [isConnected, setIsConnected] = useState(tonConnectUI.connected);
  const [address, setAddress] = useState('');
  console.log("üí©üí©üí© enter WelcomeStep");

  const auth = useAuth();

  console.log("üí©üí©üí© after useAuth");
  
  useEffect(() => {
    localStorage.setItem('disclaimerAccepted', 'false');
  }, []);

  useEffect(() => {
    const unsubscribe = tonConnectUI.onStatusChange((wallet) => {
      setIsConnected(!!wallet);
    });

    return () => {
      unsubscribe();
    };
  }, [tonConnectUI]);

  useEffect(() => {
    if(tonConnectUI.account){
      setAddress(Address.parse(tonConnectUI.account?.address).toString({
        bounceable: false,
        urlSafe: true,
        testOnly: false,
      }),)
    }
  }, [tonConnectUI.account]);

  const handleNextClick = async () => {
    if (tonConnectUI.connected) {
      await auth.mutateAsync();
      nextStep();
    } else {
      try {
        await tonConnectUI.openModal();
        await auth.mutateAsync();
      } catch (error) {
        console.error('Failed to connect or authenticate:', error);
      }
    }
  };

  const handleDisconnect = async () => {
    if (isConnected){
      try {
        await tonConnectUI.disconnect();
      } catch (error) {
        console.error('Failed to disconnect:', error);
      }
    }
  }
  // useEffect(() => {
  //   const first = setTimeout(async () => {
  //     console.log("üí©üí©üí© call auth");
  //     await auth.mutateAsync();
  //   }, 1000);
  //
  //   const second = setTimeout(() => {
  //     setLoaded(true);
  //
  //     if (tonConnectUI.connected) {
  //       nextStep();
  //     }
  //   }, 4000);
  //
  //   return () => {
  //     clearTimeout(first);
  //     clearTimeout(second);
  //   };
  // }, [tonConnectUI.connected]);

  useEffect(() => {
    const timeout = setTimeout(() => {
      setLoaded(true)
    }, 5000);

    return () => {
      clearTimeout(timeout);
    }
  }, []);

  if (!isLoaded) {
    return (
      <section
        className={"relative flex h-[100vh] items-center justify-center"}
      >
        <img alt={"splash"} className={"mb-20 h-[400px]"} src={"/splash.gif"} />
      </section>
    );
  }

  return (
    <section className={"mt-4 flex flex-col justify-between min-h-[calc(100vh-32px)] px-4"}>
      <div className="flex items-center justify-center overflow-hidden w-[100%] h-[400px]">
        <img
          alt={"splash"}
          className={" w-full shrink-0"}
          src={"/splash.gif"}
        />
      </div>

      <div className={"flex flex-col mt-4"}>
        <div className={"flex gap-2 text-sm"}>
          <span>/ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MY</span>

          <div className={"flex items-center gap-0"}>
            <span>[</span>
            <div className={"mb-0.5 h-3 w-3 rounded-full bg-primary"} />
            <span>]:</span>
          </div>
        </div>

        
          {isConnected ?
            <>
              <div className={"mt-2"}>
                <p className={"text-sm"}>
                  –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –∫–æ—à–µ–ª—å–∫–æ–º: <br/>
                  <span className={"font-bold"}>{address}</span>
                </p>
              </div>
              <div className="flex flex-col">
                  <Button
                    className={"mt-[30px]"}
                    label={"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"}
                    includeArrows={false}
                    isLoading={auth.isLoading}
                    onClick={handleNextClick}
                  />
                  <Button
                    className={"mt-[20px] bg-inherit"}
                    label={"–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"}
                    includeArrows={false}
                    isLoading={false}
                    onClick={handleDisconnect}
                  />
              </div>
            </>
          :
            <>
              <div className={"mt-2"}>
                <p className={"text-sm"}>
                  –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç. <br/> –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.
                </p>
              </div>
              <div className={"mt-2"}>
                <p className={"text-sm"}>
                  –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
                </p>
              </div>
              <Button
                className={"mt-[30px]"}
                label={"–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ TON"}
                includeArrows={true}
                isLoading={auth.isLoading}
                onClick={handleNextClick}
              />
            </>}
        
      </div>
    </section>
  );
};